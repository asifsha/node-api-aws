name: Node.js API CI/CD

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-southeast-2
  ECR_REPO: node-api
  CLUSTER_NAME: node-api-cluster
  SERVICE_NAME: node-api-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::412381746256:role/githubAccessECRECSRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        working-directory: app
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPO}:${GITHUB_SHA}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Deploy to ECS
        run: |
          TASK_FAMILY=node-api-task
          CONTAINER_NAME=node-api

          # Register new task definition
          NEW_TASK_DEF=$(jq -n \
            --arg IMAGE "$IMAGE_URI" \
            '{
              family: "node-api-task",
              networkMode: "awsvpc",
              requiresCompatibilities: ["FARGATE"],
              cpu: "256",
              memory: "512",
              executionRoleArn: "arn:aws:iam::412381746256:role/ecsTaskExecutionRole",
              containerDefinitions: [
                {
                  name: "node-api",
                  image: $IMAGE,
                  essential: true,
                  portMappings: [{ containerPort: 80, protocol: "tcp" }]
                }
              ]
            }')

          echo "$NEW_TASK_DEF" > taskdef.json
          TASK_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          # Update service
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_REVISION \
            --force-new-deployment

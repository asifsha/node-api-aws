name: Node.js API CI/CD

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPO: node-api
  STACK_NAME: NodeAPIStack

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/<GitHubOIDCRole>
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        working-directory: app
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPO}:${GITHUB_SHA}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Get ECS stack outputs
        id: cfn
        run: |
          CLUSTER=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" \
            --output text)
          SERVICE=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='ServiceName'].OutputValue" \
            --output text)
          FAMILY=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='TaskFamily'].OutputValue" \
            --output text)

          echo "CLUSTER=$CLUSTER" >> $GITHUB_ENV
          echo "SERVICE=$SERVICE" >> $GITHUB_ENV
          echo "FAMILY=$FAMILY" >> $GITHUB_ENV

      - name: Register new task definition revision
        run: |
          NEW_TASK=$(aws ecs describe-task-definition \
            --task-definition $FAMILY \
            --query taskDefinition --output json \
            | jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[0].image=$IMAGE' \
            | aws ecs register-task-definition \
                --cli-input-json file:///dev/stdin \
                --query taskDefinition.taskDefinitionA
